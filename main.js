(()=>{"use strict";function e(e,t){for(let n in t)e.setAttribute(n,t[n])}const t=(e,t)=>({title:e,content:[]});let n=[t("Default"),t("Default"),t("Default")];function a(t){t.target.classList.contains("active")||(document.querySelector(".display").innerHTML="",function(t){const n=t.target.getAttribute("data-proj"),a=document.createElement("div"),r=document.createElement("h1");e(a,{"data-disProj":n,class:"displayProject"}),r.innerHTML=t.target.innerHTML,a.append(r),document.querySelector(".display").appendChild(a)}(t),function(){const t=document.querySelector(".display > div").getAttribute("data-disproj"),a=n[t],r=Object.keys(a.content).length;for(let t=0;t<r;t++){const n=document.createElement("div"),r=document.createElement("button"),o=document.createElement("p"),c=document.createElement("p"),l=document.createElement("p"),i=document.createElement("button"),s=document.createElement("button");e(n,{"data-task":t,class:"tasks"}),c.style.overflow="hidden",i.setAttribute("class","delTask taskbtn"),s.setAttribute("class","edit taskbtn"),r.setAttribute("class","complete taskbtn"),"notCompleted"==a.content[t].completion?n.style.borderLeft="4px solid red":"Completed"==a.content[t].completion&&(n.style.borderLeft="4px solid green"),o.innerHTML=a.content[t].name,c.innerHTML=a.content[t].description,l.innerHTML=a.content[t].duedate,i.innerHTML="",s.innerHTML="",n.append(r,o,c,l,s,i),document.querySelector("[data-disProj]").appendChild(n)}}()),function(e){document.querySelectorAll("[data-proj]").forEach((function(e){e.classList.remove("active")})),e.target.classList.add("active")}(t)}function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(e){r(1,arguments);var t=o(e);return t.setHours(0,0,0,0),t}function l(e,t){r(2,arguments);var n=c(e),a=c(t);return n.getTime()===a.getTime()}function i(e){return r(1,arguments),l(e,Date.now())}null!==JSON.parse(localStorage.getItem("projects"))&&(n=JSON.parse(localStorage.getItem("projects"))),Math.pow(10,8);var s=36e5;function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function u(e,t){r(1,arguments);var n=t||{},a=null==n.additionalDigits?2:d(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,c=y(e);if(c.date){var l=b(c.date,a);o=E(l.restDateString,l.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var i,s=o.getTime(),u=0;if(c.time&&(u=v(c.time),isNaN(u)))return new Date(NaN);if(!c.timezone){var m=new Date(s+u),p=new Date(0);return p.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),p.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),p}return i=k(c.timezone),isNaN(i)?new Date(NaN):new Date(s+u+i)}var m={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},p=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,f=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,g=/^([+-])(\d{2})(?::?(\d{2}))?$/;function y(e){var t,n={},a=e.split(m.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?t=a[0]:(n.date=a[0],t=a[1],m.timeZoneDelimiter.test(n.date)&&(n.date=e.split(m.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var r=m.timezone.exec(t);r?(n.time=t.replace(r[1],""),n.timezone=r[1]):n.time=t}return n}function b(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),a=e.match(n);if(!a)return{year:NaN,restDateString:""};var r=a[1]?parseInt(a[1]):null,o=a[2]?parseInt(a[2]):null;return{year:null===o?r:100*o,restDateString:e.slice((a[1]||a[2]).length)}}function E(e,t){if(null===t)return new Date(NaN);var n=e.match(p);if(!n)return new Date(NaN);var a=!!n[4],r=T(n[1]),o=T(n[2])-1,c=T(n[3]),l=T(n[4]),i=T(n[5])-1;if(a)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,i)?function(e,t,n){var a=new Date(0);a.setUTCFullYear(e,0,4);var r=7*(t-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(t,l,i):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(j[t]||(L(e)?29:28))}(t,o,c)&&function(e,t){return t>=1&&t<=(L(e)?366:365)}(t,r)?(s.setUTCFullYear(t,o,Math.max(r,c)),s):new Date(NaN)}function T(e){return e?parseInt(e):1}function v(e){var t=e.match(f);if(!t)return NaN;var n=D(t[1]),a=D(t[2]),r=D(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,a,r)?n*s+6e4*a+1e3*r:NaN}function D(e){return e&&parseFloat(e.replace(",","."))||0}function k(e){if("Z"===e)return 0;var t=e.match(g);if(!t)return 0;var n="+"===t[1]?-1:1,a=parseInt(t[2]),r=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,r)?n*(a*s+6e4*r):NaN}var j=[31,null,31,30,31,30,31,31,30,31,30,31];function L(e){return e%400==0||e%4==0&&e%100!=0}function h(e,t){r(1,arguments);var n=t||{},a=n.locale,c=a&&a.options&&a.options.weekStartsOn,l=null==c?0:d(c),i=null==n.weekStartsOn?l:d(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=o(e),u=s.getDay(),m=(u<i?7:0)+u-i;return s.setDate(s.getDate()-m),s.setHours(0,0,0,0),s}function N(e,t,n){r(2,arguments);var a=h(e,n),o=h(t,n);return a.getTime()===o.getTime()}function A(e,t){return r(1,arguments),N(e,Date.now(),t)}let S=new Date,w=String(S.getDate()).padStart(2,"0"),H=String(S.getMonth()+1).padStart(2,"0"),M=S.getFullYear();S=M+"/"+H+"/"+w,function(){const e=document.createElement("div");e.setAttribute("class","container");const t=document.createElement("div");t.setAttribute("class","main"),t.append(function(){const e=document.createElement("div"),t=document.createElement("nav"),n=document.createElement("button"),a=document.createElement("button"),r=document.createElement("button"),o=document.createElement("div"),c=document.createElement("p"),l=document.createElement("button");return e.setAttribute("class","sideBar"),t.setAttribute("class","inbox"),n.setAttribute("class","defaultBtn home"),n.setAttribute("data-proj",0),a.setAttribute("class","today defaultBtn"),a.setAttribute("data-proj",1),r.setAttribute("class","current defaultBtn"),r.setAttribute("data-proj",2),o.setAttribute("class","proj"),c.setAttribute("class","text"),l.setAttribute("class","newProj defaultBtn"),n.innerHTML="Home",a.innerHTML="Today",r.innerHTML="This Week",c.innerHTML="Projects",l.innerHTML="Add New Project",o.append(c),t.append(n,a,r),e.append(t,o,l),e}(),function(){const e=document.createElement("div");return e.setAttribute("class","display"),e}()),e.append(function(){const e=document.createElement("div"),t=document.createElement("p"),n=document.createElement("button");return e.setAttribute("class","header"),n.setAttribute("class","newTask headerBtn"),t.innerHTML="Todo List",n.innerHTML="+",e.append(t,n),e}(),t),document.body.append(e)}(),function(){const t=document.createElement("div"),n=document.createElement("form"),a=document.createElement("label"),r=document.createElement("input"),o=document.createElement("label"),c=document.createElement("input"),l=document.createElement("label"),i=document.createElement("input"),s=document.createElement("div"),d=document.createElement("button"),u=document.createElement("button");t.setAttribute("class","taskInputs"),a.setAttribute("for","taskTitle"),o.setAttribute("for","taskDescrip"),l.setAttribute("for","taskDate"),s.setAttribute("class","taskformBtns"),e(n,{id:"taskForm",autocomplete:"off"}),e(d,{type:"button",id:"taskAdd",class:"cnfmTask"}),e(u,{type:"button",id:"taskCancel",class:"cancelTask"}),e(r,{type:"text",id:"taskTitle",name:"taskTitle",required:""}),e(c,{id:"taskDescrip",name:"taskDescrip",maxlength:"45"}),e(i,{type:"date",id:"taskDate",name:"taskDate"}),a.innerHTML="Task Title ",o.innerHTML="Task Description ",l.innerHTML="Due Date ",d.innerHTML="Add",u.innerHTML="Cancel",s.append(d,u),t.append(a,r,o,c,l,i),n.append(t,s),document.querySelector(".header > p").insertAdjacentElement("afterend",n)}(),function(){const t=document.createElement("form"),n=document.createElement("label"),a=document.createElement("input"),r=document.createElement("div"),o=document.createElement("button"),c=document.createElement("button");n.setAttribute("for","title"),r.setAttribute("class","formBtns"),e(o,{type:"button",id:"addProj",class:"cnfmProj"}),e(c,{type:"button",id:"cancelProj",class:"closeProj"}),e(t,{id:"projForm",autocomplete:"off"}),e(a,{type:"text",id:"title",name:"title",maxlength:"45",required:""}),n.innerHTML="Title ",o.innerHTML="Add",c.innerHTML="Cancel",r.append(o,c),t.append(n,a,r),document.querySelector(".newProj").insertAdjacentElement("afterend",t)}(),document.querySelector(".header").addEventListener("click",(function(t){t.target.classList.contains("newTask")&&(document.getElementById("taskForm").style.display="flex",document.querySelector("#projForm").style.display="none",null!==document.querySelector(".taskDetail")&&document.querySelector(".closeDetail").click()),t.target.classList.contains("cnfmTask")&&(function(){const t=n[document.querySelector(".display>div").getAttribute("data-disProj")];let a=document.getElementById("taskTitle").value,r=document.getElementById("taskDescrip").value,o=document.getElementById("taskDate").value;""==a&&(a="New Task"),""==r&&(r="Insert something here about the task"),""==o&&(o="No Date Specified");const c={name:a,description:r,duedate:o,completion:"notCompleted"};let l=Object.keys(t.content).length;t.content[l]=c,document.getElementById("taskTitle").value="",document.getElementById("taskDescrip").value="",document.getElementById("taskDate").value="",function(){const t=document.querySelector(".display > div").getAttribute("data-disproj"),a=n[t],r=Object.keys(a.content).length;for(let t=r-1;t<r;t++){const n=document.createElement("div"),r=document.createElement("button"),o=document.createElement("p"),c=document.createElement("p"),l=document.createElement("p"),i=document.createElement("button"),s=document.createElement("button");e(n,{"data-task":t,class:"tasks"}),c.setAttribute("class","taskDescription"),i.setAttribute("class","delTask"),s.setAttribute("class","edit"),r.setAttribute("class","complete"),"notCompleted"==a.content[t].completion?n.style.borderLeft="4px solid red":"Completed"==a.content[t].completion&&(n.style.borderLeft="4px solid green"),o.innerHTML=a.content[t].name,c.innerHTML=a.content[t].description,l.innerHTML=a.content[t].duedate,i.innerHTML="",s.innerHTML="",n.append(r,o,c,l,s,i),document.querySelector("[data-disProj]").appendChild(n)}}()}(),document.getElementById("taskForm").style.display="none")})),document.querySelector(".sideBar").addEventListener("click",(r=>{r.target.classList.contains("home")&&a(r),r.target.classList.contains("today")&&(function(){n[1].content=[];for(let e=0;e<n.length;e++)if(1!=e&&2!=e)for(let t=0;t<n[e].content.length;t++){let a=n[e].content[t];!0===i(u(a.duedate))&&n[1].content.push(a)}}(),a(r)),r.target.classList.contains("current")&&(function(){n[2].content=[];for(let e=0;e<n.length;e++)if(1!=e&&2!=e)for(let t=0;t<n[e].content.length;t++){let a=n[e].content[t];!0===A(u(a.duedate),{weekStartsOn:1})&&n[2].content.push(a)}}(),a(r)),r.target.classList.contains("newProj")&&(document.getElementById("projForm").style.display="flex",document.getElementById("taskForm").style.display="none",null!==document.querySelector(".taskDetail")&&document.querySelector(".closeDetail").click()),r.target.classList.contains("cnfmProj")&&(function(){let a=document.getElementById("title").value;""==a&&(a="New Project");const r=t(a);n.push(r),document.getElementById("title").value="",function(){let t=n.length;for(let a=t-1;a<t;a++){const t=document.createElement("div"),r=document.createElement("button"),o=document.createElement("button");e(r,{class:"projBtn","data-proj":a}),e(t,{class:"projHold"}),o.setAttribute("class","projDel"),r.innerHTML=n[a].title,o.innerHTML="X",t.append(o,r),document.querySelector(".proj").appendChild(t)}}()}(),document.getElementById("projForm").style.display="none"),r.target.classList.contains("projBtn")&&a(r),r.target.classList.contains("projDel")&&function(e){e.target.parentNode.remove();const t=e.target.nextSibling.getAttribute("data-proj");n.splice(t,1),document.querySelectorAll(".projHold > [data-proj]").forEach((function(e){e.removeAttribute("data-proj")})),function(){let e=3;document.querySelectorAll(".projBtn").forEach((function(t){t.setAttribute("data-proj",e),e+=1}))}()}(r)})),document.querySelector(".display").addEventListener("click",(function(t){t.target.classList.contains("delTask")&&function(e){const t=e.target.parentNode.getAttribute("data-task"),a=e.target.parentNode.parentNode.getAttribute("data-disProj");e.target.parentNode.remove(),n[a].content.splice(t,1),document.querySelectorAll("[data-task]").forEach((function(e){e.removeAttribute("data-task")})),function(){let e=0;document.querySelectorAll(".tasks").forEach((function(t){t.setAttribute("data-task",e),e+=1}))}()}(t),t.target.classList.contains("edit")&&(null!==document.querySelector(".taskDetail")&&document.querySelector(".closeDetail").click(),function(t){const a=document.createElement("div"),r=t.target.parentNode.getAttribute("data-task"),o=t.target.parentNode.parentNode.getAttribute("data-disProj"),c=n[o].content[r],l=document.createElement("form"),i=document.createElement("label"),s=document.createElement("input"),d=document.createElement("label"),u=document.createElement("input"),m=document.createElement("label"),p=document.createElement("input"),f=document.createElement("div"),g=document.createElement("button"),y=document.createElement("button");a.setAttribute("class","newInputs"),e(l,{class:"taskDetail",autocomplete:"off","data-taskChange":r}),e(i,{for:"newTitle"}),e(s,{type:"text",id:"newTitle",name:"newTitle",required:"",value:c.name}),e(d,{for:"newDescrip"}),e(u,{id:"newDescrip",name:"newDescrip",maxlength:"45"}),e(m,{for:"newDeadline"}),e(p,{type:"date",id:"newDeadline",name:"newDeadline",value:c.duedate}),e(f,{class:"changeformBtns"}),e(g,{class:"cnfmChange",type:"button"}),e(y,{class:"closeDetail"}),u.value=c.description,g.innerHTML="Confirm",y.innerHTML="Cancel",i.innerHTML="Title ",d.innerHTML="Description ",f.append(g,y),a.append(i,s,d,u,m,p),l.append(a,f),document.querySelector(".display").append(l)}(t),document.getElementById("projForm").style.display="none",document.getElementById("taskForm").style.display="none"),t.target.classList.contains("complete")&&function(e){const t=e.target.parentNode.getAttribute("data-task"),a=e.target.parentNode.parentNode.getAttribute("data-disProj");let r=n[a].content[t].completion;"notCompleted"==r&&(n[a].content[t].completion="Completed",e.target.parentNode.style.borderLeft="4px solid green"),"Completed"==r&&(n[a].content[t].completion="notCompleted",e.target.parentNode.style.borderLeft="4px solid red")}(t),t.target.classList.contains("cnfmChange")&&function(e){const t=document.querySelector(".displayProject").getAttribute("data-disproj"),a=e.target.parentNode.parentNode.getAttribute("data-taskChange");let r=document.getElementById("newTitle").value,o=document.getElementById("newDescrip").value,c=document.getElementById("newDeadline").value;n[t].content[a].name=r,n[t].content[a].description=o,n[t].content[a].duedate=c,console.log(n[t].content[a]),document.querySelector(".display").innerHTML="",document.querySelector(".active").classList.remove("active"),document.querySelector(`[data-proj = "${t}"`).click()}(t),t.target.classList.contains("closeDetail")&&(t.preventDefault(),t.target.parentNode.parentNode.remove())})),document.querySelectorAll(".closeProj, .cancelTask").forEach((function(e){e.addEventListener("click",(function(e){e.target.parentNode.parentNode.style.display="none"}))})),function(){let t=n.length;for(let a=3;a<t;a++){const t=document.createElement("div"),r=document.createElement("button"),o=document.createElement("button");e(r,{class:"projBtn","data-proj":a}),e(t,{class:"projHold"}),o.setAttribute("class","projDel"),r.innerHTML=n[a].title,o.innerHTML="X",t.append(o,r),document.querySelector(".proj").appendChild(t)}}(),document.querySelector(".home").click(),document.body.addEventListener("click",(function(){localStorage.setItem("projects",JSON.stringify(n))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,